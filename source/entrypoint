#!/bin/bash

function wrapper() {
  echo "Calling wrapper"
  exec /wrapper
  echo "Failed in call to wrapper"
  exit 1
}

# Current user and group ids
USER_ID=$(id -u)
GROUP_ID=$(id -g)

# Allow override of the user we'll run as. Default to root
PUID="${PUID:-0}"
PGID="${PGID:-0}"

# Check if we could do any user management
if [ "$USER_ID" != "0" ] ; then
  # Nothing we can do with user management as we're already another user. Just
  # call the wrapper
  echo "Already another user ${USER_ID}:${GROUP_ID}"
  wrapper
  exit 1
fi

# Check if we're already the correct user and group
if [ "$USER_ID" == "$PUID" ] && [ "$GROUP_ID" == "$PGID" ] ; then
  echo "Already target user and group ${PUID}:${PGID}"
  wrapper
  exit 1
fi

if [ "$USER_ID" != "$PUID" ] ; then
fi

# We're the root user and either the user id or group id is incorrect
# Make sure the user and group entries exist
echo "Adding oxidized group with GID $PGID"
if ! groupadd -g "$PGID" -o oxidized ; then
  echo "Could not create group"
  exit 1
fi
echo "Group Entity: $(getent group oxidized)"

echo "Adding oxidized user with UID $PUID"
if ! useradd -u "${PUID}" -g "${PGID}" -M -d $HOME oxidized ; then
  echo "Could not create user"
  exit 1
fi
echo "User Entity: $(getent user oxidized)"

# Create the group, if it doesn't exist
if ! id -gn > /dev/null 2>&1 ; then
  echo "Group does not have a passwd entry"
  echo "Creating user account for current ID: ${USER_ID}:${GROUP_ID}"
  if ! groupadd -g "$GROUP_ID" oxidized ; then
    echo "Could not create group"
    exit 1
  fi
  echo "User Entity: $(getent group oxidized)"
fi

if ! id -un > /dev/null 2>&1 ; then
  echo "User does not have a passwd entry"
  echo "Creating user account for current ID: ${USER_ID}:${GROUP_ID}"
  if ! useradd -u "$USER_ID" -g "$GROUP_ID" -M -d $HOME oxidized ; then
    echo "Could not create user account"
    exit 1
  fi
  echo "User Entity: $(getent passwd oxidized)"
fi


# Create the oxidized directory
echo "Creating oxidized root: $OXIDIZED_ROOT"
if ! mkdir -p "$OXIDIZED_ROOT" ; then
  echo "Failed to create oxidized directory"
  exit 1
fi

# Attempt exclusive lock before continuing
echo "Attempting exclusive lock on file: $LOCK_FILE"
exec 4> "$LOCK_FILE"
if ! flock -w 5 -x 4 ; then
  echo "Could not get exclusive lock on $LOCK_FILE"
  exit 1
else
  echo "Exclusive lock successful"
fi

# Remove the existing PID file
echo "Removing PID file: $PID_FILE"
if [ "$PID_FILE" != "" ] && [ -f "$PID_FILE" ] ; then
  if ! rm -f "$PID_FILE" ; then
    echo "Could not remove pid file: $PID_FILE"
    exit 1
  fi
else
  echo "PID file ($PID_FILE) not found"
fi

# Copy the source configuration, if present
echo "Checking for config source: $SOURCE_CONFIG"
if [ -f "$SOURCE_CONFIG" ] ; then
  echo "Config found in $SOURCE_CONFIG"
  if ! cp "$SOURCE_CONFIG" "$CONFIG_FILE" ; then
    echo "Failed to copy configuration to $CONFIG_FILE"
    exit 1
  else
    echo "Copied configuration to $CONFIG_FILE"
  fi
else
  echo "Did not find source config in $SOURCE_CONFIG"
fi

# Execute oxidized
exec /usr/local/bin/oxidized

# Could not run oxidized, so exit with failure
echo "Could not run oxidized"
exit 1
