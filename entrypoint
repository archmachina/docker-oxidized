#!/bin/bash

# Global settings
set -o pipefail
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "${SCRIPT_PATH}")
VERSION_SOURCES="
$GITHUB_REF
"
DOCKER_IMAGE="archmachina/oxidized"
DOCKER_USERNAME="archmachina"
DOCKER_HOST="docker.io"

GITHUB_OWNER=archmachina
GITHUB_REPO=docker-oxidized


. "${SCRIPT_DIR}/exec/exec_functions"

while [ "$1" != "" ] ; do

  COMMAND="$1"
  shift

  case "$COMMAND" in
    build)
      IMAGE=$(assert docker build -f ./source/Dockerfile -q ./source)
      echo $IMAGE
      ;;

    push)
      assert [ "$IMAGE" != "" ]

      # Log in using supplied token
      assert docker login --password-stdin -u "${DOCKER_USERNAME}" "${DOCKER_HOST}" < <(echo "${DOCKER_TOKEN}")

      # Determine tag versions
      VERSION=$(get_semver_match < <(echo "$VERSION_SOURCES"))
      if [ "$VERSION" != "" ] ; then
        assert semver_extract "$VERSION"

        # oxidized specific - capture source tag
        OXIDIZED_TAG=$(assert sed -ne 's/^FROM oxidized\/oxidized:\(.*\)$/\1/p' source/Dockerfile | head -1)

        SEMVER_FULL=${SEMVER_FULL//+/_/}
        TAG_VERSIONS="$TAG_VERSIONS ${SEMVER_FULL}-${OXIDIZED_TAG}"
        [ "$SEMVER_PRERELEASE" == "" ] && TAG_VERSIONS="$TAG_VERSIONS ${SEMVER_MAJOR}"
        [ "$SEMVER_PRERELEASE" == "" ] && TAG_VERSIONS="$TAG_VERSIONS ${SEMVER_MAJOR}.${SEMVER_MINOR}"
      fi

      echo "TAG_VERSIONS: $TAG_VERSIONS"
      # Push each tag
      for TAG in $TAG_VERSIONS ; do
        [ "$TAG" == "" ] && continue
        assert docker tag "${IMAGE}" "${DOCKER_IMAGE}:${TAG}"
        assert docker push "${DOCKER_IMAGE}:${TAG}"
      done
      ;;

    release)
      # Determine tag versions
      VERSION=$(get_semver_match < <(echo "$VERSION_SOURCES"))
      assert [ "$VERSION" != "" ]

      # Remove leading refs/tags/
      VERSION="${VERSION#refs/tags/}"

      GITHUB_PRERELEASE='false'
      [ "${SEMVER_PRERELEASE}" != "" ] && GITHUB_PRERELEASE='true'

      assert github_release -o "${GITHUB_OWNER}" -r "${GITHUB_REPO}" -t "${VERSION}" -d false \
        -p "${GITHUB_PRERELEASE}" -n "Version ${VERSION}" -a "${GITHUB_TOKEN}" -g
  esac
done

exit 0
